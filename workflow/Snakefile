from utils import WorkflowPaths, Args

paths = WorkflowPaths(config)
args = Args(paths, config)

localrules: all

rule all:
    input:
        paths.annotations if args.annotate else [],
        paths.explorer_experiment,
        paths.explorer_image,
        paths.report,
    params:
        explorer_directory = paths.explorer_directory,
        explorer_experiment = paths.explorer_experiment,
    shell:
        """
        echo ðŸŽ‰ Successfully run sopa
        echo â†’ SpatialData output directory: {params.sdata_path}
        echo â†’ Explorer output directory: {params.explorer_directory}
        echo â†’ Open the result in the explorer: 'open {params.explorer_experiment}'
        """

rule:
    name: # set rule names dynamically, so that they don't conflict in DAG building phase
        f"{config["key"]}_to_spatialdata"
    input:
        ancient(paths.data_path if config["read"]["technology"] != "uniform" else []),
    output:
        paths.sdata_zgroup if paths.data_path else [],
    conda:
        "sopa"
    resources:
        mem_mb=128_000,
    params:
        args_reader = str(args['read']),
        data_path = paths.data_path,
        sdata_path = paths.sdata_path,
    shell:
        """
        sopa read {params.data_path} --sdata-path {params.sdata_path} {params.args_reader}
        """


checkpoint:
    name: 
        f"{config["key"]}_patchify_cellpose"
    input:
        paths.sdata_zgroup,
    output:
        patches_file = paths.smk_patches_file_image,
        patches = touch(paths.smk_patches),
    params:
        args_patchify = str(args["patchify"].where(contains="pixel")),
        sdata_path = paths.sdata_path,
    conda:
        "sopa"
    shell:
        """
        sopa patchify image {params.sdata_path} {params.args_patchify}
        """

checkpoint:
    name: 
        f"{config["key"]}_patchify_baysor"
    input:
        paths.sdata_zgroup,
        paths.smk_cellpose_boundaries if args.cellpose else [],
    output:
        patches_file = paths.smk_patches_file_baysor,
        smk_baysor_temp_dir = directory(paths.smk_baysor_temp_dir),
    params:
        args_patchify = str(args["patchify"].where(contains="micron")),
        args_baysor = args.dump_baysor_patchify() if args.baysor else "",
        arg_prior = "--use-prior" if args.cellpose else "",
        sdata_path = paths.sdata_path,
    resources:
        mem_mb=32_000,
    conda:
        "sopa"
    shell:
        """
        sopa patchify baysor {params.sdata_path} {params.args_patchify} {params.args_baysor} {params.arg_prior}
        """

checkpoint:
    name: 
        f"{config["key"]}_patchify_comseg"
    input:
        paths.sdata_zgroup,
        paths.smk_cellpose_boundaries if args.cellpose else [],
    output:
        patches_file = paths.smk_patches_file_comseg,
        smk_comseg_temp_dir = directory(paths.smk_comseg_temp_dir),
    params:
        args_patchify = str(
            args["patchify"].where([
                "patch_width_microns",
                "patch_overlap_microns",
                "min_transcripts_per_patch",
                "min_cells_per_patch",
            ],
        )),
        args_comseg = args.dump_comseg_patchify() if args.comseg else "",
        arg_prior = "--use-prior" if args.cellpose else "",
        sdata_path = paths.sdata_path,
    conda:
        "sopa"
    shell:
        """
        sopa patchify comseg {params.sdata_path} {params.args_patchify} {params.args_comseg} {params.arg_prior}
        """

rule:
    name: 
        f"{config["key"]}_patch_segmentation_cellpose"
    input:
        paths.smk_patches_file_image,
        paths.smk_patches,
    output:
        paths.smk_cellpose_temp_dir / "{index}.parquet",
    conda:
        "sopa"
    params:
        args_cellpose = str(args["segmentation"]["cellpose"]),
        sdata_path = paths.sdata_path,
        smk_cellpose_temp_dir = paths.smk_cellpose_temp_dir,
    shell:
        """
        sopa segmentation cellpose {params.sdata_path} --patch-dir {params.smk_cellpose_temp_dir} --patch-index {wildcards.index} {params.args_cellpose}
        """

rule:
    name: 
        f"{config["key"]}_patch_segmentation_baysor"
    input:
        patches_file = paths.smk_patches_file_baysor,
        baysor_patch = paths.smk_baysor_temp_dir / "{index}",
    output:
        paths.smk_baysor_temp_dir / "{index}" / "segmentation_counts.loom",
    params:
        args_baysor_prior_seg = args.baysor_prior_seg,
        baysor_executable = config["executables"]["baysor"],
    resources:
        mem_mb=128_000,
    shell:
        """
        if command -v module &> /dev/null; then
            module purge
        fi

        cd {input.baysor_patch}

        help_output=$({params.baysor_executable} run --help 2>&1) # check if the polygon-format option is available
        if [[ $help_output == *"polygon-format"* ]]; then
            {params.baysor_executable} run --polygon-format GeometryCollection -c config.toml transcripts.csv {params.args_baysor_prior_seg}
        else
            {params.baysor_executable} run --save-polygons GeoJSON -c config.toml transcripts.csv {params.args_baysor_prior_seg}
        fi
        """

rule:
    name: 
        f"{config["key"]}_patch_segmentation_comseg"
    input:
        patches_file = paths.smk_patches_file_comseg,
        baysor_patch = paths.smk_comseg_temp_dir / "{index}",
    output:
        paths.smk_comseg_temp_dir / "{index}" / "segmentation_polygons.json",
        paths.smk_comseg_temp_dir / "{index}" / "segmentation_counts.h5ad",
    params:
        sdata_path = paths.sdata_path,
        smk_comseg_temp_dir = paths.smk_comseg_temp_dir,
    conda:
        "sopa"
    resources:
        mem_mb=128_000,
    shell:
        """
        sopa segmentation comseg {params.sdata_path} --patch-dir {params.smk_comseg_temp_dir} --patch-index {wildcards.index}
        """

def get_input_resolve(name, dirs=False):
    def _(wilcards):
        with getattr(checkpoints, f"{config["key"]}_patchify_{name}").get(**wilcards).output.patches_file.open() as f:
            return paths.cells_paths(f.read(), name, dirs=dirs)
    return _

rule:
    name: 
        f"{config["key"]}_resolve_cellpose"
    input:
        get_input_resolve("cellpose"),
    output:
        touch(paths.smk_cellpose_boundaries),
    params:
        sdata_path = paths.sdata_path,
        smk_cellpose_temp_dir = paths.smk_cellpose_temp_dir,
    conda:
        "sopa"
    shell:
        """
        sopa resolve cellpose {params.sdata_path} --patch-dir {params.smk_cellpose_temp_dir}
        """

rule:
    name: 
        f"{config["key"]}_resolve_baysor"
    input:
        files = get_input_resolve("baysor"),
        dirs = get_input_resolve("baysor", dirs=True),
    output:
        touch(paths.smk_baysor_boundaries),
        touch(paths.smk_table),
    conda:
        "sopa"
    params:
        args_patches_dirs = lambda _, input: " ".join(f"--patches-dirs {directory}" for directory in input.dirs),
        args_min_area = args.min_area("baysor"),
        sdata_path = paths.sdata_path,
        smk_baysor_temp_dir = paths.smk_baysor_temp_dir,
        gene_column = args.gene_column,
    shell:
        """
        sopa resolve baysor {params.sdata_path} --gene-column {params.gene_column} {params.args_min_area} {params.args_patches_dirs}

        # rm -r {params.smk_baysor_temp_dir}    # cleanup large baysor files -> removed RB to allow DAG to be built after running
        """

rule:
    name: 
        f"{config["key"]}_resolve_comseg"
    input:
        files = get_input_resolve("comseg"),
        dirs = get_input_resolve("comseg",dirs=True),
    output:
        touch(paths.smk_comseg_boundaries),
        touch(paths.smk_table),
    conda:
        "sopa"
    params:
        args_patches_dirs=lambda _, input: " ".join(f"--patches-dirs {directory}" for directory in input.dirs),
        args_min_area=args.min_area("comseg"),
        sdata_path = paths.sdata_path,
        smk_comseg_temp_dir = paths.smk_comseg_temp_dir,
        gene_column = args.gene_column,
    shell:
        """
        sopa resolve comseg {params.sdata_path} --gene-column {params.gene_column} {params.args_min_area} {params.args_patches_dirs}

        # rm -r {params.smk_comseg_temp_dir}    # cleanup large comseg files -> removed RB to allow DAG to be built after running
        """

def get_smk_boundaries(args):
    if args.baysor:
        return paths.smk_baysor_boundaries
    elif args.comseg:
        return paths.smk_comseg_boundaries
    elif args.cellpose:
        return paths.smk_cellpose_boundaries
    else:
        raise ValueError("No segmentation method selected")

rule:
    name: 
        f"{config["key"]}_aggregate"
    input:
        get_smk_boundaries(args),
    output:
        touch(paths.smk_aggregation),
    conda:
        "sopa"
    params:
        args_aggregate = str(args["aggregate"] or ""),
        sdata_path = paths.sdata_path,
    resources:
        mem_mb=64_000,
    shell:
        """
        sopa aggregate {params.sdata_path} {params.args_aggregate}
        """

rule:
    name: 
        f"{config["key"]}_annotate"
    input:
        paths.smk_aggregation,
    output:
        directory(paths.annotations),
    conda:
        "sopa"
    resources:
        # adapted by RB, recommended by sopa author
        slurm_partition = "gpu" if args['annotation']['method'] == "tangram" else "shortq",
        slurm_extra = "--qos=gpu --gres=gpu:h100pcie" if args['annotation']['method'] == "tangram" else "--qos=shortq",
        mem_mb = 128000,
        runtime = "12h",
    params:
        method_name = args['annotation']['method'],
        args_annotation = str(args['annotation']['args']),
        sdata_path = paths.sdata_path,
    shell:
        """
        sopa annotate {params.method_name} {params.sdata_path} {params.args_annotation}
        """

rule:
    name: 
        f"{config["key"]}_image_write"
    input:
        paths.sdata_zgroup,
    output:
        paths.explorer_image,
    params:
        sdata_path = paths.sdata_path,
        args_explorer = str(args["explorer"].where(keys=['lazy', 'ram_threshold_gb', 'pixel_size', 'pixelsize'])),
        explorer_directory = paths.explorer_directory,
    conda:
        "sopa"
    resources:
        mem_mb=64_000,
        partition="longq"
    shell:
        """
        sopa explorer write {params.sdata_path} --output-path {params.explorer_directory} {params.args_explorer} --mode "+i" --no-save-h5ad
        """

rule:
    name: 
        f"{config["key"]}_report"
    input:
        get_smk_boundaries(args),
        paths.smk_aggregation,
        paths.annotations if args.annotate else [],
    output:
        paths.report,
    params:
        sdata_path = paths.sdata_path,
        report = paths.report,
    conda:
        "sopa"
    shell:
        """
        sopa report {params.sdata_path} {params.report}
        """

rule:
    name: 
        f"{config["key"]}_explorer"
    input:
        get_smk_boundaries(args),
        paths.smk_aggregation,
        paths.annotations if args.annotate else [],
    output:
        paths.explorer_experiment,
    conda:
        "sopa"
    resources:
        mem_mb=256_000,
    params:
        args_explorer = str(args["explorer"]),
        sdata_path = paths.sdata_path,
        explorer_directory = paths.explorer_directory,
    shell:
        """
        sopa explorer write {params.sdata_path} --output-path {params.explorer_directory} {params.args_explorer} --mode "-i"
        """
